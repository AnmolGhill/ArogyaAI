import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useLanguage } from '../contexts/LanguageContext';
import '../styles/chatbot.css';

const Chatbot = () => {
  const navigate = useNavigate();
  const { t, currentLanguage } = useLanguage();
  const [symptomInput, setSymptomInput] = useState('');
  const [selectedSymptoms, setSelectedSymptoms] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [diagnosisResult, setDiagnosisResult] = useState('');

  // Get translated symptoms
  const getCommonSymptoms = () => [
    t('headache'), t('fever'), t('cough'), t('fatigue'), 
    t('nausea'), t('soreThroat'), t('shortnessBreath'), t('chestPain'),
    t('diarrhea'), t('dizziness'), t('lossSmell'), t('lossTaste'),
    t('runnyNose'), t('sneezing'), t('musclePain'), t('backPain')
  ];

  const addSymptom = () => {
    if (symptomInput.trim() && !selectedSymptoms.includes(symptomInput.trim())) {
      setSelectedSymptoms([...selectedSymptoms, symptomInput.trim()]);
      setSymptomInput('');
    }
  };

  const addPredefinedSymptom = (symptom) => {
    if (!selectedSymptoms.includes(symptom)) {
      setSelectedSymptoms([...selectedSymptoms, symptom]);
    }
  };

  const removeSymptom = (symptomToRemove) => {
    setSelectedSymptoms(selectedSymptoms.filter(symptom => symptom !== symptomToRemove));
  };

  const clearSymptoms = () => {
    setSelectedSymptoms([]);
    setDiagnosisResult('');
  };

  // Language-specific fallback responses
  const getLanguageFallback = (symptoms, language) => {
    const symptomsString = symptoms.join(', ');
    
    const fallbacks = {
      'hi': {
        title1: 'ЁЯУЛ рдирд┐рджрд╛рди рд╕рд╛рд░рд╛рдВрд╢',
        title2: 'ЁЯТК рд╕реБрдЭрд╛рдИ рдЧрдИ рджрд╡рд╛рдПрдВ', 
        title3: 'тЪая╕П рд╕рдВрднрд╛рд╡рд┐рдд рджреБрд╖реНрдкреНрд░рднрд╛рд╡',
        title4: 'ЁЯЪл рдмрдЪрдиреЗ рдпреЛрдЧреНрдп рдЪреАрдЬреЗрдВ',
        title5: 'ЁЯУЕ рдлреЙрд▓реЛ-рдЕрдк рд╕реБрдЭрд╛рд╡',
        content: `рдЖрдкрдХреЗ рд▓рдХреНрд╖рдгреЛрдВ (${symptomsString}) рдХреЗ рдЖрдзрд╛рд░ рдкрд░, рдпрд╣ рдПрдХ рд╕рд╛рдорд╛рдиреНрдп рд╡рд╛рдпрд░рд▓ рд╕рдВрдХреНрд░рдордг рдкреНрд░рддреАрдд рд╣реЛрддрд╛ рд╣реИ`
      },
      'pa': {
        title1: 'ЁЯУЛ риири┐рижри╛рии ри╕ри╛ри░',
        title2: 'ЁЯТК ри╕ри┐рилри╛ри░ри╕ри╝рйА рижри╡ри╛риИриЖриВ',
        title3: 'тЪая╕П ри╕рй░ринри╛ри╡ри┐рид риори╛рйЬрйЗ рикрйНри░ринри╛ри╡',
        title4: 'ЁЯЪл римриЪриг ри╡ри╛ри▓рйАриЖриВ риЪрйАриЬри╝ри╛риВ',
        title5: 'ЁЯУЕ рилри╛ри▓рйЛ-риЕрй▒рик ри╕рйБриЭри╛риЕ',
        content: `ридрйБри╣ри╛рибрйЗ ри▓рй▒риЫригри╛риВ (${symptomsString}) рижрйЗ риЖризри╛ри░ ридрйЗ, риЗри╣ риЗрй▒риХ риЖрио ри╡ри╛риЗри░ри▓ риЗриирилрйИриХри╕ри╝рии риЬри╛рикрижри╛ ри╣рйИ`
      },
      'or': {
        title1: 'ЁЯУЛ рмирм┐рмжрм╛рми рм╕рм╛рм░рм╛рмВрм╢',
        title2: 'ЁЯТК рмкрм░рм╛рморм░рнНрм╢рм┐рмд рмФрм╖рмз',
        title3: 'тЪая╕П рм╕рморнНрмнрм╛рммрнНрнЯ рмкрм╛рм░рнНрм╢рнНрн▒ рмкрнНрм░рмнрм╛рмм',
        title4: 'ЁЯЪл рмПрмбрм╝рм╛рмЗрммрм╛рмХрнБ рмерм┐рммрм╛ рмЬрм┐рмирм┐рм╖',
        title5: 'ЁЯУЕ рмлрм▓рнЛ-рмЕрмкрнН рмкрм░рм╛рморм░рнНрм╢',
        content: `рмЖрмкрмгрмЩрнНрмХ рм▓рмХрнНрм╖рмг (${symptomsString}) рмЖрмзрм╛рм░рм░рнЗ, рмПрм╣рм╛ рмПрмХ рм╕рм╛рмзрм╛рм░рмг рмнрм╛рмЗрм░рм╛рм▓рнН рм╕рмВрмХрнНрм░рмормг рмкрм░рм┐ рмжрнЗрмЦрм╛рмпрм╛рмЙрмЫрм┐`
      }
    };
    
    const lang = fallbacks[language] || {
      title1: 'ЁЯУЛ Diagnosis Summary',
      title2: 'ЁЯТК Recommended Medicines',
      title3: 'тЪая╕П Possible Side Effects', 
      title4: 'ЁЯЪл Things to Avoid',
      title5: 'ЁЯУЕ Follow-Up Suggestions',
      content: `Based on symptoms (${symptomsString}), this appears to be a common viral infection`
    };
    
    return `
      <div style="background: #e3f2fd; border: 1px solid #90caf9; border-radius: 8px; padding: 1rem; margin-bottom: 1rem;">
        <p style="margin: 0; color: #1565c0; font-size: 0.9rem;">
          тД╣я╕П ${language === 'hi' ? 'рд╣рдорд╛рд░реЗ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮреЛрдВ рджреНрд╡рд╛рд░рд╛ рддреИрдпрд╛рд░ рдХрд┐рдП рдЧрдП рд╕реБрдЭрд╛рд╡ рдкреНрд░рджрд╛рди рдХрд┐рдП рдЬрд╛ рд░рд╣реЗ рд╣реИрдВред' : 
               language === 'pa' ? 'ри╕ри╛рибрйЗ риорйИрибрйАриХри▓ риори╛ри╣ри┐ри░ри╛риВ рижрйБриЖри░ри╛ ридри┐риЖри░ риХрйАридрйЗ ри╕рйБриЭри╛риЕ рикрйНри░рижри╛рии риХрйАридрйЗ риЬри╛ ри░ри╣рйЗ ри╣рииред' :
               language === 'or' ? 'рмЖрморм░ рмЪрм┐рмХрм┐рмдрнНрм╕рм╛ рммрм┐рм╢рнЗрм╖рмЬрнНрмЮрмЩрнНрмХ рмжрнНрн▒рм╛рм░рм╛ рмкрнНрм░рм╕рнНрмдрнБрмд рмкрм░рм╛рморм░рнНрм╢ рмкрнНрм░рмжрм╛рми рмХрм░рм╛рмпрм╛рмЙрмЫрм┐ред' :
               'Medical guidance prepared by our healthcare experts is being provided.'}
        </p>
      </div>
      
      <hr style='width: 100%; border: none; border-top: 2px solid #f28b82; margin: 2rem 0;'>
      
      <div>
        <h3 style='font-size:1.1rem; color:#003153; font-weight:bold;'>${lang.title1}</h3>
        <hr style='margin: 0.2rem 0 1rem 0; border: none; border-top: 1px solid #ccc;'>
        <ol style='list-style-type: decimal; padding-left: 20px;'>
          <li><b>${language === 'hi' ? 'рд╕рдВрднрд╛рд╡рд┐рдд рд╕реНрдерд┐рддрд┐' : language === 'pa' ? 'ри╕рй░ринри╛ри╡ри┐рид ри╕риери┐ридрйА' : language === 'or' ? 'рм╕рморнНрмнрм╛рммрнНрнЯ рмЕрммрм╕рнНрмерм╛' : 'Likely Condition'}:</b> ${lang.content}</li>
          <li><b>${language === 'hi' ? 'рд╕реБрдЭрд╛рд╡' : language === 'pa' ? 'ри╕рйБриЭри╛риЕ' : language === 'or' ? 'рмкрм░рм╛рморм░рнНрм╢' : 'Recommendation'}:</b> ${language === 'hi' ? 'рдЖрд░рд╛рдо рдХрд░реЗрдВ рдФрд░ рдкрд╛рдиреА рдкрд┐рдПрдВ' : language === 'pa' ? 'риЖри░ри╛рио риХри░рйЛ риЕридрйЗ рикри╛ригрйА рикрйАриУ' : language === 'or' ? 'рммрм┐рм╢рнНрм░рм╛рмо рмирм┐рмЕрмирнНрмдрнБ рмПрммрмВ рмкрм╛рмгрм┐ рмкрм┐рмЕрмирнНрмдрнБ' : 'Rest and stay hydrated'}</li>
          <li><b>${language === 'hi' ? 'рдЪрд┐рдХрд┐рддреНрд╕рдХ рд╕реЗ рдорд┐рд▓реЗрдВ' : language === 'pa' ? 'рибри╛риХриЯри░ риирйВрй░ риори┐ри▓рйЛ' : language === 'or' ? 'рмбрм╛рмХрнНрмдрм░рмЩрнНрмХрнБ рмжрнЗрмЦрм╛рмирнНрмдрнБ' : 'See Doctor'}:</b> ${language === 'hi' ? 'рдпрджрд┐ рд▓рдХреНрд╖рдг рдмрд┐рдЧрдбрд╝рддреЗ рд╣реИрдВ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ' : language === 'pa' ? 'риЬрйЗ ри▓рй▒риЫриг ри╡ри┐риЧрйЬрижрйЗ ри╣рии ридри╛риВ рибри╛риХриЯри░ риири╛ри▓ ри╕рй░рикри░риХ риХри░рйЛ' : language === 'or' ? 'рмпрмжрм┐ рм▓рмХрнНрм╖рмг рмЦрм░рм╛рмк рм╣рнБрмП рмдрнЗрммрнЗ рмбрм╛рмХрнНрмдрм░рмЩрнНрмХ рм╕рм╣рм┐рмд рмпрнЛрмЧрм╛рмпрнЛрмЧ рмХрм░рмирнНрмдрнБ' : 'Contact doctor if symptoms worsen'}</li>
        </ol>
      </div>

      <div>
        <h3 style='font-size:1.1rem; color:#003153; font-weight:bold;'>${lang.title2}</h3>
        <hr style='margin: 0.2rem 0 1rem 0; border: none; border-top: 1px solid #ccc;'>
        <ol style='list-style-type: decimal; padding-left: 20px;'>
          <li><b>${language === 'hi' ? 'рджрд░реНрдж рдирд┐рд╡рд╛рд░рдХ' : language === 'pa' ? 'рижри░риж риири┐ри╡ри╛ри░риХ' : language === 'or' ? 'рмпрмирнНрмдрнНрм░рмгрм╛ рмирм┐рммрм╛рм░рмХ' : 'Pain Relief'}:</b> ${language === 'hi' ? 'рдкреИрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓ 500mg рдЖрд╡рд╢реНрдпрдХрддрд╛рдиреБрд╕рд╛рд░' : language === 'pa' ? 'рикрйИри░ри╛ри╕ри┐риЯри╛риорйЛри▓ 500mg ри▓рйЛрйЬ риЕриирйБри╕ри╛ри░' : language === 'or' ? 'рмкрм╛рм░рм╛рм╕рм┐рмЯрм╛рморм▓ 500mg рмЖрммрм╢рнНрнЯрмХ рмЕрмирнБрмпрм╛рнЯрнА' : 'Paracetamol 500mg as needed'}</li>
          <li><b>${language === 'hi' ? 'рддрд░рд▓ рдкрджрд╛рд░реНрде' : language === 'pa' ? 'ридри░ри▓ рикрижри╛ри░рие' : language === 'or' ? 'рмдрм░рм│ рмкрмжрм╛рм░рнНрме' : 'Fluids'}:</b> ${language === 'hi' ? 'рдЧрд░реНрдо рдкрд╛рдиреА, рдЪрд╛рдп, рд╕реВрдк рдкрд┐рдПрдВ' : language === 'pa' ? 'риЧри░рио рикри╛ригрйА, риЪри╛ри╣, ри╕рйВрик рикрйАриУ' : language === 'or' ? 'рмЧрм░рмо рмкрм╛рмгрм┐, рмЪрм╛, рм╕рнБрмкрнН рмкрм┐рмЕрмирнНрмдрнБ' : 'Drink warm water, tea, soup'}</li>
          <li><b>${language === 'hi' ? 'рдЖрд░рд╛рдо' : language === 'pa' ? 'риЖри░ри╛рио' : language === 'or' ? 'рммрм┐рм╢рнНрм░рм╛рмо' : 'Rest'}:</b> ${language === 'hi' ? 'рдкрд░реНрдпрд╛рдкреНрдд рдиреАрдВрдж рдФрд░ рдЖрд░рд╛рдо рд▓реЗрдВ' : language === 'pa' ? 'риХри╛рилрйА риирйАриВриж риЕридрйЗ риЖри░ри╛рио ри▓риУ' : language === 'or' ? 'рмкрм░рнНрмпрнНрнЯрм╛рмкрнНрмд рмирм┐рмжрнНрм░рм╛ рмПрммрмВ рммрм┐рм╢рнНрм░рм╛рмо рмирм┐рмЕрмирнНрмдрнБ' : 'Get adequate sleep and rest'}</li>
        </ol>
      </div>
    `;
  };

  // Gemini API integration
  const callGeminiAPI = async (symptoms, language) => {
    const languageNames = {
      'en': 'English',
      'hi': 'Hindi',
      'pa': 'Punjabi', 
      'or': 'Odia'
    };

    const prompt = `You are a medical AI assistant. Analyze the following symptoms and provide a comprehensive medical diagnosis in ${languageNames[language] || 'English'} language.

Symptoms: ${symptoms.join(', ')}

Please provide a detailed response in the following format (respond entirely in ${languageNames[language] || 'English'}):

1. **Diagnosis Summary** (6 points):
   - Likely Condition
   - Primary Cause  
   - Symptom Relation
   - Body System affected
   - Severity Level
   - Recommendation

2. **Recommended Medicines** (6 points):
   - Pain Relief options
   - Specific treatments
   - Hydration advice
   - Usage instructions
   - Duration guidelines
   - When to consult doctor

3. **Possible Side Effects** (6 points):
   - Mild side effects
   - Stomach related
   - Allergic reactions
   - Management tips
   - When to stop medication
   - Emergency signs

4. **Things to Avoid** (6 points):
   - Foods to avoid
   - Activities to limit
   - Substances to avoid
   - Environmental factors
   - Habits to stop
   - Delays to avoid

5. **Follow-Up Suggestions** (6 points):
   - Check-up timeline
   - Tests if needed
   - Monitoring advice
   - Warning signs
   - Specialist referral
   - Prevention tips

Format each section with proper headings and numbered lists. Use appropriate medical terminology but keep it understandable for patients.`;

    try {
      console.log('ЁЯФе Using server Gemini API...');
      
      // Use server's Gemini API instead of direct client calls
      const response = await fetch('http://localhost:8000/api/get_diagnosis', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          symptoms: symptoms.join(', '),
          language: language
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        
        // Handle quota exceeded specifically (this is expected behavior)
        if (response.status === 429 || errorData.includes('QUOTA_EXCEEDED')) {
          console.log('тД╣я╕П Gemini API quota temporarily exceeded, using intelligent fallback system');
          throw new Error('QUOTA_EXCEEDED');
        }
        
        console.error('тЭМ Server Gemini API Error:', response.status, errorData);
        throw new Error(`Server API Error: ${response.status} - ${errorData}`);
      }

      const data = await response.json();
      console.log('тЬЕ Server Gemini API Success! Response received');
      return data.response;
    } catch (error) {
      // Don't log quota exceeded as an error since it's expected behavior
      if (error.message !== 'QUOTA_EXCEEDED') {
        console.error('тЭМ Gemini API Error:', error.message);
      }
      throw error;
    }
  };

  const getDiagnosis = async () => {
    if (selectedSymptoms.length === 0) {
      alert(t('selectAtLeastOne'));
      return;
    }

    setIsLoading(true);
    setDiagnosisResult('');

    try {
      // Try to call Gemini API first
      let diagnosis;
      try {
        diagnosis = await callGeminiAPI(selectedSymptoms, currentLanguage);
        
        // Clean up the Gemini response - remove any markdown artifacts
        diagnosis = diagnosis.replace(/```html\s*/g, '');
        diagnosis = diagnosis.replace(/```\s*/g, '');
        diagnosis = diagnosis.replace(/^\s*"html\s*/g, '');
        diagnosis = diagnosis.replace(/"\s*$/g, '');
        
        // Ensure proper HTML structure
        if (!diagnosis.includes('<div>') && !diagnosis.includes('<hr')) {
          // If it's plain text, format it properly
          diagnosis = diagnosis.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
          diagnosis = diagnosis.replace(/\n/g, '<br>');
          diagnosis = `<div style="line-height: 1.6; color: #2D3748; padding: 1rem;">${diagnosis}</div>`;
        } else {
          // If it's already HTML, just clean it up
          diagnosis = diagnosis.trim();
        }
      } catch (geminiError) {
        if (geminiError.message === 'QUOTA_EXCEEDED') {
          console.log('тД╣я╕П Switching to intelligent fallback system - providing medical guidance in your language');
        } else {
          console.log('ЁЯФД Gemini API temporarily unavailable, using language-specific fallback response');
          console.log('ЁЯУЭ Fallback reason:', geminiError.message);
        }
        // Use language-specific fallback response
        diagnosis = getLanguageFallback(selectedSymptoms, currentLanguage);
      }

      setDiagnosisResult(diagnosis);
    } catch (error) {
      console.error('Error getting diagnosis:', error);
      alert(t('diagnosisFailed'));
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      addSymptom();
    }
  };

  return (
    <div className="chatbot-container">
      {/* Header */}
      <header className="chatbot-header">
        <div className="header-content">
          <div className="symptom-ai-badge">
            ЁЯй║ {t('symptomAI')}
          </div>
          <button 
            onClick={() => navigate('/doctor')}
            className="contact-doctor-btn"
          >
            ЁЯСитАНтЪХя╕П {t('contactDoctor')}
          </button>
        </div>
      </header>

      {/* Main Content */}
      <main className="chatbot-main">
        <div className="chatbot-card fade-in">
          <h2 className="custom-heading">{t('enterSymptoms')}</h2>

          {/* Symptom Input */}
          <div className="symptom-input-section">
            <input 
              type="text" 
              placeholder={t('typeSymptom')}
              className="symptom-input"
              value={symptomInput}
              onChange={(e) => setSymptomInput(e.target.value)}
              onKeyPress={handleKeyPress}
            />
            <button onClick={addSymptom} className="add-btn">
              тЮХ {t('addSymptom')}
            </button>
          </div>

          {/* Common Symptoms */}
          <div className="common-symptoms-section">
            <h3 className="common-symptoms-title">{t('commonSymptoms')}</h3>
            <div className="symptoms-grid">
              {getCommonSymptoms().map((symptom, index) => (
                <button 
                  key={index}
                  onClick={() => addPredefinedSymptom(symptom)} 
                  className="symptom-tag"
                >
                  {symptom}
                </button>
              ))}
            </div>
          </div>

          {/* Selected Symptoms */}
          <div className="selected-symptoms-section">
            <h3 className="selected-symptoms-title">{t('selectedSymptoms')}</h3>
            <div className="selected-symptoms-container">
              <div className="selected-symptoms">
                {selectedSymptoms.map((symptom, index) => (
                  <div key={index} className="selected-symptom-tag">
                    {symptom}
                    <button 
                      onClick={() => removeSymptom(symptom)}
                      className="remove-symptom"
                    >
                      ├Ч
                    </button>
                  </div>
                ))}
              </div>
              {selectedSymptoms.length === 0 && (
                <p className="no-symptoms-text">{t('noSymptomsSelected')}</p>
              )}
            </div>
          </div>

          {/* Action Buttons */}
          <div className="action-buttons">
            <button onClick={clearSymptoms} className="clear-btn">
              ЁЯЧСя╕П {t('clearAll')}
            </button>
            <button onClick={getDiagnosis} className="diagnose-btn">
              ЁЯФН {t('getDiagnosis')}
            </button>
          </div>

          {/* Loading Spinner */}
          <div className={`loading-container ${!isLoading ? 'hidden' : ''}`}>
            <div className="loader"></div>
            <p className="loading-text">{t('analyzingSymptoms')}</p>
          </div>

          {/* Diagnosis Output */}
          <div 
            className={`diagnosis-result ${!diagnosisResult ? 'hidden' : 'show'}`}
            dangerouslySetInnerHTML={{ __html: diagnosisResult }}
          />
        </div>
      </main>
    </div>
  );
};

export default Chatbot;
